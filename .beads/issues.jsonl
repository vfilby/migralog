{"id":"MigraineTracker-1","title":"Fix medication notifications triggering after early dose","description":"Notifications should not fire if medication was already logged before the scheduled time. GitHub issue #49","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-20T21:58:17.322506-07:00","updated_at":"2025-10-20T22:02:27.529447-07:00","closed_at":"2025-10-20T22:02:27.529447-07:00"}
{"id":"MigraineTracker-10","title":"Update CLAUDE.md documentation","description":"Update project documentation to reflect ULID usage.\n\nFile: CLAUDE.md\n\nChanges needed:\n1. Document ID generation approach\n2. Add ULID to tech stack\n3. Document testing patterns for ULID mocks\n4. Add migration notes (for future reference)\n\nExample addition:\n```markdown\n## ID Generation\n\nThe app uses ULID (Universally Unique Lexicographically Sortable Identifier) for all database IDs.\n\n**Library:** `ulidx` with `react-native-get-random-values` polyfill\n\n**Format:** 26-character Base32 string (e.g., `01ARZ3NDEKTSV4RRFFQ69G5FAV`)\n\n**Benefits:**\n- 128-bit with 80 bits cryptographic randomness\n- Lexicographically sortable (timestamp-based)\n- Compact and URL-safe\n- Cloud sync ready\n\n**Testing:** Use mock utilities in testHelpers.ts for deterministic tests\n```","acceptance_criteria":"- CLAUDE.md includes ULID documentation\n- Tech stack section updated\n- Testing guidance added\n- Migration notes documented","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-21T07:19:06.293055-07:00","updated_at":"2025-10-21T07:47:55.199774-07:00","closed_at":"2025-10-21T07:47:55.199774-07:00","dependencies":[{"issue_id":"MigraineTracker-10","depends_on_id":"MigraineTracker-12","type":"blocks","created_at":"2025-10-21T07:19:39.742785-07:00","created_by":"daemon"},{"issue_id":"MigraineTracker-10","depends_on_id":"MigraineTracker-2","type":"parent-child","created_at":"2025-10-21T07:20:22.205073-07:00","created_by":"daemon"}]}
{"id":"MigraineTracker-11","title":"Run precommit checks and verify build","description":"Execute all precommit checks to ensure the ULID migration is production-ready.\n\nCommands:\n```bash\ncd app\nnpm run precommit\n```\n\nThis runs:\n- ESLint with zero warnings\n- TypeScript type checking\n- Full test suite with coverage\n\nAdditional manual checks:\n1. Test iOS build: `npm run ios`\n2. Test Android build: `npm run android`\n3. Verify app launches without errors\n4. Create a few test records to verify ULID generation\n5. Check ULID format in database (should be 26 chars)\n\nLook for:\n- No TypeScript errors\n- No lint warnings\n- All tests pass\n- App builds successfully\n- IDs are proper ULID format","acceptance_criteria":"- npm run precommit passes with 0 errors/warnings\n- iOS build succeeds\n- Android build succeeds\n- App launches and generates valid ULIDs\n- Manual testing shows IDs are 26-character ULIDs","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-21T07:19:20.683313-07:00","updated_at":"2025-10-21T07:48:15.740803-07:00","closed_at":"2025-10-21T07:48:15.740803-07:00","dependencies":[{"issue_id":"MigraineTracker-11","depends_on_id":"MigraineTracker-12","type":"blocks","created_at":"2025-10-21T07:19:44.336735-07:00","created_by":"daemon"},{"issue_id":"MigraineTracker-11","depends_on_id":"MigraineTracker-2","type":"parent-child","created_at":"2025-10-21T07:20:22.21414-07:00","created_by":"daemon"}]}
{"id":"MigraineTracker-12","title":"Create PR and close GitHub issue #18","description":"Create pull request for ULID migration and link to GitHub issue.\n\nPR Title: \"feat: Migrate to ULID for all database IDs\"\n\nPR Description should include:\n- Summary of changes\n- Why ULID was chosen (security, cloud-sync ready, sortable)\n- Libraries added (ulidx, react-native-get-random-values)\n- Test coverage status\n- Migration impact (none - pre-production)\n- Link to issue #18\n\nChecklist:\n- [ ] Create feature branch: `feature/ulid-migration`\n- [ ] Commit all changes\n- [ ] Push to remote\n- [ ] Create PR via gh pr create\n- [ ] Reference \"Fixes #18\" in PR description\n- [ ] Verify CI checks pass\n- [ ] Request review if needed\n\nAfter merge:\n- Close Beads epic MigraineTracker-2\n- Verify GitHub issue #18 auto-closed","acceptance_criteria":"- PR created and linked to issue #18\n- All CI checks pass\n- PR description is comprehensive\n- GitHub issue #18 closes when PR merges","notes":"IMPORTANT: Do not create PR until all implementation, testing, documentation, and verification tasks are 100% complete. This is the final step after everything else is done and working.","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-21T07:19:34.593075-07:00","updated_at":"2025-10-21T08:03:29.865498-07:00","closed_at":"2025-10-21T08:03:29.865498-07:00","dependencies":[{"issue_id":"MigraineTracker-12","depends_on_id":"MigraineTracker-2","type":"parent-child","created_at":"2025-10-21T07:20:22.222913-07:00","created_by":"daemon"}]}
{"id":"MigraineTracker-13","title":"POST-PR: Add data migration strategy for existing user","description":"Add safety checks to ensure ULID migration doesn't break existing installations.\n\n**Context:**\n- Current schema version: 8\n- ID columns: All TEXT type (no schema change needed)\n- Old format: timestamp-random (~25-30 chars)\n- New format: ULID (26 chars)\n- Pre-production: No known production users\n\n**Implementation:**\n\n1. Add version check in migrations.ts:\n```typescript\n// migration version 9: ULID transition (no-op migration)\n{\n  version: 9,\n  name: 'ulid_transition_marker',\n  up: async (db: SQLite.SQLiteDatabase) =\u003e {\n    // This is a marker migration - no actual changes needed\n    // All ID columns are already TEXT and compatible with ULID\n    logger.log('[Migration 9] ULID transition: no schema changes required');\n    \n    // Optional: Log existing data count for safety\n    const tables = ['episodes', 'medications', 'medication_doses', 'daily_status_logs'];\n    for (const table of tables) {\n      const result = await db.getAllAsync(`SELECT COUNT(*) as count FROM ${table}`);\n      logger.log(`[Migration 9] ${table}: ${result[0].count} existing records`);\n    }\n  },\n}\n```\n\n2. Add SCHEMA_VERSION bump to 9 in schema.ts\n\n3. Add safety documentation in migration comments\n\n**Acceptance Criteria:**\n- Schema version bumped to 9\n- Migration 9 added (no-op marker)\n- Existing installations log data counts\n- New installations skip straight to v9\n- Documentation explains why no data migration needed","acceptance_criteria":"- SCHEMA_VERSION = 9 in schema.ts\n- Migration 9 added to migrations.ts\n- Migration logs existing data counts\n- Migration is a no-op (no ALTER TABLE)\n- Comments explain ULID compatibility","notes":"This task is DEFERRED until after the main ULID PR is merged. Since there's only one user (you), an offline migration strategy can be designed and implemented separately. This keeps the main PR focused on the ULID implementation without migration complexity.","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-21T07:24:34.506869-07:00","updated_at":"2025-10-21T07:33:43.172383-07:00"}
{"id":"MigraineTracker-14","title":"Improve sparkline gradient background styling","description":"The transparent gradient background in IntensitySparkline provides useful scale context, but the current style could be improved. Currently uses 15% opacity gradient with pain scale colors (greenâ†’purple).\n\nCurrent implementation in IntensitySparkline.tsx:\n- LinearGradient with 11 color stops from PAIN_SCALE\n- stopOpacity=\"0.15\" for subtlety\n- Renders as background behind the sparkline path\n\nNeed to explore alternative visual approaches that maintain the scale indication while improving aesthetics.","design":"Potential approaches to consider:\n\n1. **Adjust opacity**: Try different opacity levels (10%, 20%, 25%) to find better balance\n2. **Different gradient style**: \n   - Use fewer color stops (just key pain levels: mild, moderate, severe)\n   - Add gradient blur/feathering for smoother transitions\n   - Try radial gradient instead of linear\n3. **Alternative visual indicators**:\n   - Subtle horizontal bands/zones instead of gradient\n   - Faded grid lines at pain level thresholds\n   - Subtle texture or pattern overlay\n4. **Color adjustments**:\n   - Desaturate the gradient colors\n   - Use single-color gradient with varying intensity\n   - Match theme colors more closely\n\nFile to modify: src/components/IntensitySparkline.tsx (lines 106-129)","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-23T22:01:42.473972-07:00","updated_at":"2025-10-23T22:01:42.473972-07:00"}
{"id":"MigraineTracker-15","title":"Remove superfluous follow-up notification after medication is logged","description":"Currently when a medication is logged from a notification action, a follow-up notification is sent confirming it has been logged. This is unnecessary and should be removed.","status":"closed","priority":2,"issue_type":"bug","created_at":"2025-10-24T07:56:40.973724-07:00","updated_at":"2025-10-24T08:46:20.87447-07:00","closed_at":"2025-10-24T08:46:20.87447-07:00"}
{"id":"MigraineTracker-16","title":"Enable time-sensitive notifications for medication reminders","description":"Medication reminders should use time-sensitive notification priority so they still display even when the user is in a focus mode. This ensures critical medication reminders are not missed.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-24T07:56:46.840032-07:00","updated_at":"2025-10-24T10:39:33.589105-07:00","closed_at":"2025-10-24T10:39:33.589105-07:00"}
{"id":"MigraineTracker-17","title":"Fix dashboard not updating after logging medication from notification","description":"After logging a medication from a notification action, the dashboard doesn't show the medication as logged until something triggers a re-render (like navigating to a sub page and back). The dashboard should immediately reflect the updated state.","status":"closed","priority":2,"issue_type":"bug","created_at":"2025-10-24T07:56:53.632702-07:00","updated_at":"2025-10-24T10:34:46.135853-07:00","closed_at":"2025-10-24T10:34:46.135853-07:00"}
{"id":"MigraineTracker-18","title":"Add configurable follow-up reminder with critical alert sound","description":"Add an optional 30-minute follow-up reminder if the user hasn't taken action (neither dismissed nor logged as taken). This reminder should use critical alert sound that plays even when the phone is silenced.","design":"Requires iOS critical alerts entitlement. Will need to request special permission from Apple. The follow-up reminder should be configurable per medication or globally.","status":"in_progress","priority":1,"issue_type":"feature","created_at":"2025-10-24T07:57:00.47355-07:00","updated_at":"2025-10-24T10:49:12.285235-07:00"}
{"id":"MigraineTracker-19","title":"Add notification settings UI in Settings and medication screens","description":"Create UI to allow users to configure notification preferences including:\n- Time-sensitive notifications (on/off)\n- Follow-up reminder delay (off, 15 min, 30 min, 45 min, 60 min)\n- Critical alert sound for follow-ups (on/off)\n- Confirmation notifications (on/off)\n\nSettings should be accessible from both the Settings screen (global defaults) and individual medication detail screens (per-medication overrides).","status":"open","priority":1,"issue_type":"feature","created_at":"2025-10-24T07:57:08.916029-07:00","updated_at":"2025-10-24T07:57:08.916029-07:00","dependencies":[{"issue_id":"MigraineTracker-19","depends_on_id":"MigraineTracker-15","type":"blocks","created_at":"2025-10-24T07:57:15.70552-07:00","created_by":"daemon"},{"issue_id":"MigraineTracker-19","depends_on_id":"MigraineTracker-16","type":"blocks","created_at":"2025-10-24T07:57:20.706497-07:00","created_by":"daemon"},{"issue_id":"MigraineTracker-19","depends_on_id":"MigraineTracker-18","type":"blocks","created_at":"2025-10-24T07:57:26.939786-07:00","created_by":"daemon"}]}
{"id":"MigraineTracker-2","title":"Migrate from timestamp-based IDs to ULID","description":"Replace the current home-grown ID generation (Date.now() + Math.random()) with ULID (Universally Unique Lexicographically Sortable Identifier) to support future cloud sync, improve security, and use industry-standard identifiers.\n\nContext:\n- Current: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n- Target: ULID (128-bit, 26-character Base32 string)\n- Benefits: Cryptographically secure, sortable, cloud-sync ready, compact\n- Library: ulidx + react-native-get-random-values polyfill\n\nScope:\n- 10 database tables with ID columns\n- ~9 calls to generateId() across repositories\n- All tests need updating for deterministic ULID mocks\n- Migration strategy (none needed - pre-production)","status":"closed","priority":2,"issue_type":"epic","created_at":"2025-10-21T07:17:02.193282-07:00","updated_at":"2025-10-21T08:03:29.874864-07:00","closed_at":"2025-10-21T08:03:29.874864-07:00"}
{"id":"MigraineTracker-3","title":"Install ULID dependencies","description":"Install ulidx and react-native-get-random-values packages.\n\nCommands:\n```bash\ncd app\nnpm install ulidx react-native-get-random-values --save\n```\n\nVerification:\n- Check package.json includes both dependencies\n- Run npm install to ensure no conflicts\n- Verify no peer dependency warnings","acceptance_criteria":"- ulidx added to package.json dependencies\n- react-native-get-random-values added to package.json dependencies\n- npm install completes without errors\n- No peer dependency conflicts","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-21T07:17:08.952874-07:00","updated_at":"2025-10-21T07:33:30.801368-07:00","closed_at":"2025-10-21T07:33:30.801368-07:00","dependencies":[{"issue_id":"MigraineTracker-3","depends_on_id":"MigraineTracker-4","type":"blocks","created_at":"2025-10-21T07:17:29.452481-07:00","created_by":"daemon"},{"issue_id":"MigraineTracker-3","depends_on_id":"MigraineTracker-5","type":"blocks","created_at":"2025-10-21T07:17:41.969254-07:00","created_by":"daemon"},{"issue_id":"MigraineTracker-3","depends_on_id":"MigraineTracker-6","type":"blocks","created_at":"2025-10-21T07:17:58.3428-07:00","created_by":"daemon"},{"issue_id":"MigraineTracker-3","depends_on_id":"MigraineTracker-2","type":"parent-child","created_at":"2025-10-21T07:19:55.102271-07:00","created_by":"daemon"}]}
{"id":"MigraineTracker-4","title":"Update generateId() implementation in db.ts","description":"Replace the current timestamp-based ID generation with ULID.\n\nLocation: app/src/database/db.ts\n\nCurrent implementation:\n```typescript\nexport const generateId = (): string =\u003e {\n  return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n};\n```\n\nNew implementation:\n```typescript\nimport 'react-native-get-random-values';\nimport { ulid } from 'ulidx';\n\nexport const generateId = (): string =\u003e {\n  return ulid();\n};\n```\n\nNotes:\n- Import polyfill BEFORE ulidx import\n- Remove old implementation completely\n- Keep function signature identical (no breaking changes)","acceptance_criteria":"- react-native-get-random-values imported at top of db.ts\n- ulidx imported after polyfill\n- generateId() returns ulid() \n- Function signature unchanged\n- No TypeScript errors","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-21T07:17:16.617065-07:00","updated_at":"2025-10-21T07:43:10.235259-07:00","closed_at":"2025-10-21T07:43:10.235259-07:00","dependencies":[{"issue_id":"MigraineTracker-4","depends_on_id":"MigraineTracker-7","type":"blocks","created_at":"2025-10-21T07:18:16.319853-07:00","created_by":"daemon"},{"issue_id":"MigraineTracker-4","depends_on_id":"MigraineTracker-8","type":"blocks","created_at":"2025-10-21T07:18:34.160034-07:00","created_by":"daemon"},{"issue_id":"MigraineTracker-4","depends_on_id":"MigraineTracker-2","type":"parent-child","created_at":"2025-10-21T07:20:22.149581-07:00","created_by":"daemon"}]}
{"id":"MigraineTracker-5","title":"Update db.web.ts with ULID implementation","description":"Update the web platform-specific database file with ULID.\n\nLocation: app/src/database/db.web.ts\n\nThe web version should use the same ULID implementation for consistency across platforms.\n\nImplementation:\n```typescript\nimport 'react-native-get-random-values';\nimport { ulid } from 'ulidx';\n\nexport const generateId = (): string =\u003e {\n  return ulid();\n};\n```\n\nNotes:\n- Web platform uses browser's crypto.getRandomValues\n- Polyfill should work in browser context\n- Keep implementation identical to db.ts","acceptance_criteria":"- react-native-get-random-values imported\n- ulidx imported\n- generateId() returns ulid()\n- Web build compiles without errors","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-21T07:17:37.18255-07:00","updated_at":"2025-10-21T07:43:39.949423-07:00","closed_at":"2025-10-21T07:43:39.949423-07:00","dependencies":[{"issue_id":"MigraineTracker-5","depends_on_id":"MigraineTracker-2","type":"parent-child","created_at":"2025-10-21T07:20:22.161574-07:00","created_by":"daemon"}]}
{"id":"MigraineTracker-6","title":"Create ULID test utilities and mocks","description":"Create test utilities for mocking ULID generation to ensure deterministic tests.\n\nCreate new file: app/src/utils/testHelpers.ts (or update existing)\n\nImplementation:\n```typescript\nimport { ulid } from 'ulidx';\n\n// Mock ULID for deterministic tests\nexport const mockUlid = (seed: number = 0): string =\u003e {\n  // Return predictable ULIDs for testing\n  const timestamp = 1609459200000 + seed; // Fixed timestamp\n  const randomPart = seed.toString(36).padStart(16, '0');\n  return `01E${timestamp.toString(36).toUpperCase()}${randomPart.toUpperCase()}`;\n};\n\n// Jest mock setup helper\nexport const setupUlidMocks = () =\u003e {\n  let counter = 0;\n  jest.mock('ulidx', () =\u003e ({\n    ulid: jest.fn(() =\u003e mockUlid(counter++)),\n  }));\n};\n```\n\nNotes:\n- ULIDs must be 26 characters\n- Must be lexicographically sortable in tests\n- Consider using ulidx's decodeTime for test assertions","acceptance_criteria":"- Test helper functions created\n- Mock ULID generator produces valid 26-char strings\n- Mocked ULIDs are sortable and predictable\n- Helper functions documented","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-21T07:17:52.729203-07:00","updated_at":"2025-10-21T07:44:26.500687-07:00","closed_at":"2025-10-21T07:44:26.500687-07:00","dependencies":[{"issue_id":"MigraineTracker-6","depends_on_id":"MigraineTracker-7","type":"blocks","created_at":"2025-10-21T07:18:20.075793-07:00","created_by":"daemon"},{"issue_id":"MigraineTracker-6","depends_on_id":"MigraineTracker-8","type":"blocks","created_at":"2025-10-21T07:18:39.12929-07:00","created_by":"daemon"},{"issue_id":"MigraineTracker-6","depends_on_id":"MigraineTracker-2","type":"parent-child","created_at":"2025-10-21T07:20:22.170816-07:00","created_by":"daemon"}]}
{"id":"MigraineTracker-7","title":"Update repository tests to use ULID mocks","description":"Update all repository test files to mock ULID generation for deterministic tests.\n\nFiles to update:\n- app/src/database/__tests__/episodeRepository.test.ts\n- app/src/database/__tests__/medicationRepository.test.ts\n- app/src/database/__tests__/dailyStatusRepository.test.ts\n\nChanges needed:\n1. Import ULID mock utilities\n2. Mock generateId() to return predictable ULIDs\n3. Update test expectations to use ULID format\n4. Update any ID assertions (format changed from timestamp-random to ULID)\n\nExample pattern:\n```typescript\nimport { generateId } from '../db';\n\njest.mock('../db', () =\u003e ({\n  ...jest.requireActual('../db'),\n  generateId: jest.fn(() =\u003e 'TEST_ULID_0000000000'),\n}));\n\nbeforeEach(() =\u003e {\n  (generateId as jest.Mock).mockReturnValue('TEST_ULID_0000000000');\n});\n```","acceptance_criteria":"- All repository test files updated\n- generateId() properly mocked in each test\n- All tests pass with ULID format\n- No hardcoded timestamp-based IDs in tests","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-21T07:18:12.019801-07:00","updated_at":"2025-10-21T07:46:56.858198-07:00","closed_at":"2025-10-21T07:46:56.858198-07:00","dependencies":[{"issue_id":"MigraineTracker-7","depends_on_id":"MigraineTracker-9","type":"blocks","created_at":"2025-10-21T07:18:50.951794-07:00","created_by":"daemon"},{"issue_id":"MigraineTracker-7","depends_on_id":"MigraineTracker-2","type":"parent-child","created_at":"2025-10-21T07:20:22.179353-07:00","created_by":"daemon"}]}
{"id":"MigraineTracker-8","title":"Update service/store tests to use ULID mocks","description":"Update all service and store test files to handle ULID format.\n\nFiles to update:\n- app/src/services/__tests__/notificationService.test.ts\n- app/src/services/__tests__/backupService.test.ts\n- app/src/store/__tests__/*.test.ts (if any use generateId)\n\nChanges needed:\n1. Update mocks to return ULID format\n2. Update any ID format validations\n3. Update snapshot tests if they capture IDs\n4. Ensure no tests break due to ID format change\n\nNote: Most service tests likely don't generate IDs directly, but may assert on ID format in responses.","acceptance_criteria":"- All service test files reviewed and updated\n- All store test files reviewed and updated\n- Mocks return valid ULID format\n- All tests pass","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-21T07:18:29.618146-07:00","updated_at":"2025-10-21T07:47:28.865256-07:00","closed_at":"2025-10-21T07:47:28.865256-07:00","dependencies":[{"issue_id":"MigraineTracker-8","depends_on_id":"MigraineTracker-9","type":"blocks","created_at":"2025-10-21T07:18:55.166379-07:00","created_by":"daemon"},{"issue_id":"MigraineTracker-8","depends_on_id":"MigraineTracker-2","type":"parent-child","created_at":"2025-10-21T07:20:22.187728-07:00","created_by":"daemon"}]}
{"id":"MigraineTracker-9","title":"Run full test suite and fix any failures","description":"Execute complete test suite to identify and fix any ULID-related failures.\n\nCommands:\n```bash\ncd app\nnpm test\n```\n\nExpected issues to fix:\n- Tests expecting old ID format (timestamp-random)\n- Hardcoded ID expectations in assertions\n- Snapshot tests with embedded IDs\n- Mock setup issues\n- ID validation regex/patterns\n\nProcess:\n1. Run full test suite\n2. Document all failures\n3. Fix each failure systematically\n4. Re-run tests until all pass\n5. Document any non-obvious fixes in test comments","acceptance_criteria":"- npm test passes with 0 failures\n- All 778+ tests pass\n- No skipped tests related to ULID\n- Coverage maintained or improved","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-21T07:18:47.417664-07:00","updated_at":"2025-10-21T07:47:34.416939-07:00","closed_at":"2025-10-21T07:47:34.416939-07:00","dependencies":[{"issue_id":"MigraineTracker-9","depends_on_id":"MigraineTracker-10","type":"blocks","created_at":"2025-10-21T07:19:11.166026-07:00","created_by":"daemon"},{"issue_id":"MigraineTracker-9","depends_on_id":"MigraineTracker-11","type":"blocks","created_at":"2025-10-21T07:19:24.681978-07:00","created_by":"daemon"},{"issue_id":"MigraineTracker-9","depends_on_id":"MigraineTracker-2","type":"parent-child","created_at":"2025-10-21T07:20:22.195905-07:00","created_by":"daemon"}]}
