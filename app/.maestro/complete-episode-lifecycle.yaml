appId: com.eff3.app.headache-tracker
---
# Test: Complete Episode Lifecycle
# Tests the full episode workflow: create, log readings, add notes, end, and verify timeline
# This test starts with a clean database

# Setup: Reset database
- runFlow: setup-clean-database.yaml

# ======================
# Phase 1: Create Episode
# ======================

# Verify Start Episode button is visible (only shows when no active episode)
- assertVisible:
    id: "start-episode-button"

# Start a new episode
- tapOn:
    id: "start-episode-button"

# Should be on Start Episode screen
- assertVisible: "Start Episode"

# Scroll down to save button
- scrollUntilVisible:
    element:
      id: "save-episode-button"
    direction: DOWN
    speed: 80

# Save the episode (with default intensity = 3)
- tapOn:
    id: "save-episode-button"

# Wait for save and modal dismissal
- waitForAnimationToEnd

# Verify we're back on dashboard
- assertVisible:
    id: "dashboard-title"

# Verify episode was created - Start Episode button should NOT be visible
- assertNotVisible:
    id: "start-episode-button"

# Verify active episode card is showing
- assertVisible:
    id: "active-episode-card"

# ======================
# Phase 2: Update Episode Details
# ======================

# Tap the active episode card to open details
- tapOn:
    id: "active-episode-card"

# Should be on Episode Detail screen
- assertVisible: "Episode Details"

# Tap Edit button
- tapOn: "Edit"

# Should be on Edit Episode screen
- assertVisible: "Edit Episode"

# Scroll to find locations field
- scrollUntilVisible:
    element:
      text: "Location"
    direction: DOWN
    speed: 80

# Note: Can't easily select specific locations/symptoms in Maestro without more testIDs
# This would require adding testIDs to the individual picker items

# Scroll down to notes field
- scrollUntilVisible:
    element:
      text: "Notes"
    direction: DOWN
    speed: 80

# Add a note about the episode
- tapOn:
    text: "Notes"
- inputText: "This is a test episode with detailed notes about the pain characteristics and potential triggers."

# Save the edits
- scrollUntilVisible:
    element:
      id: "save-episode-button"
    direction: DOWN
    speed: 80
- tapOn:
    id: "save-episode-button"

# Wait for save
- waitForAnimationToEnd

# Should be back on Episode Details
- assertVisible: "Episode Details"

# Verify the note was saved
- assertVisible: "This is a test episode"

# ======================
# Phase 3: Log Intensity Reading
# ======================

# Go back to dashboard
- tapOn: "Done"

# Wait for dashboard to load
- assertVisible:
    id: "dashboard-title"

# Tap the active episode card again
- tapOn:
    id: "active-episode-card"

# Should be on Episode Detail screen
- assertVisible: "Episode Details"

# Look for "Log Intensity" button and tap it
- scrollUntilVisible:
    element:
      text: "Log Intensity"
    direction: DOWN
    speed: 80
- tapOn: "Log Intensity"

# Adjust intensity slider (this is tricky in Maestro - we'll just save current value)
# Note: A proper test would need testIDs on the slider to set specific values

# Tap Save on the modal
- tapOn: "Save"

# Wait for modal to close
- waitForAnimationToEnd

# Verify we're still on Episode Details
- assertVisible: "Episode Details"

# ======================
# Phase 4: Add Episode Note
# ======================

# Look for "Add Note" button
- scrollUntilVisible:
    element:
      text: "Add Note"
    direction: DOWN
    speed: 80
- tapOn: "Add Note"

# Enter note text
- inputText: "Feeling slightly better after resting"

# Save the note
- tapOn: "Save"

# Wait for note to be saved
- waitForAnimationToEnd

# Verify note appears in timeline
- assertVisible: "Feeling slightly better"

# ======================
# Phase 5: Verify Timeline
# ======================

# Scroll to Timeline section
- scrollUntilVisible:
    element:
      text: "Timeline"
    direction: DOWN
    speed: 80

# Verify Timeline is visible
- assertVisible: "Timeline"

# Timeline should show:
# - Episode started event
# - Intensity reading
# - Note added
# All these should be visible in the timeline

# ======================
# Phase 6: End Episode
# ======================

# Scroll to End Episode button
- scrollUntilVisible:
    element:
      id: "end-episode-button"
    direction: DOWN
    speed: 80

# Tap End Episode
- tapOn:
    id: "end-episode-button"

# Confirm ending
- tapOn: "End Episode"

# Wait for episode to end
- waitForAnimationToEnd

# Should still be on Episode Details
- assertVisible: "Episode Details"

# Episode should now show "Ended" status
# Timeline should show end event

# ======================
# Phase 7: Verify Location
# ======================

# Look for location information
# Note: Location display depends on permissions and simulator settings
# We'll just verify the Location section exists by scrolling up to top
- scroll

# If location is visible, it means location was captured
# Location coordinates should be shown on a map

# ======================
# Phase 8: Verify Episode in History
# ======================

# Go back to dashboard
- tapOn: "Done"

# Wait for dashboard
- assertVisible:
    id: "dashboard-title"

# The episode should no longer be in the "Current Episode" section
- assertNotVisible:
    id: "active-episode-card"

# Verify Start Episode button is back (no active episode)
- assertVisible:
    id: "start-episode-button"

# Go to Episodes tab to see history
- tapOn:
    id: "episodes-tab"

# Verify Episodes screen loaded
- assertVisible: "Episodes"

# The closed episode should appear in the list
- assertVisible:
    id: "episode-card-0"

# Tap on the episode to view details
- tapOn:
    id: "episode-card-0"

# Should be back on Episode Details for the closed episode
- assertVisible: "Episode Details"

# Verify episode shows our note
- assertVisible: "This is a test episode"

# Verify timeline shows all events
- scrollUntilVisible:
    element:
      text: "Timeline"
    direction: DOWN
    speed: 80

# Timeline should show start, intensity, note, and end events

# Test complete!
# We've successfully:
# 1. Created an episode
# 2. Edited episode details
# 3. Logged intensity reading
# 4. Added a note
# 5. Verified timeline
# 6. Ended the episode
# 7. Checked location (if available)
# 8. Verified episode appears in history
