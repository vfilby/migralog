appId: com.eff3.app.headache-tracker
---
# Comprehensive Episode Lifecycle Test
# Tests all aspects of episode management: creation, updates, editing, medications, and completion
#
# PREREQUISITES:
# - This test requires a development build (NOT Expo Go)
# - Run: npx expo run:ios
# - Wait for the dev build to install and launch in simulator
#
# This test validates:
# - Creating a new episode with initial intensity
# - Editing episode details (locations, symptoms, triggers, notes)
# - Logging intensity updates via LogUpdate screen
# - Adding episode notes via LogUpdate screen
# - Ending the episode
# - Verifying episode in history

# ======================
# Setup: Launch and Clean Database
# ======================
- launchApp:
    clearState: true

# Wait for app to fully initialize
- extendedWaitUntil:
    visible:
      id: "dashboard-title"
    timeout: 20000

# Navigate to Settings to reset database
- tapOn:
    id: "settings-button"

# Wait for Settings screen
- assertVisible: "Settings"

# Scroll to Reset Database button
- scrollUntilVisible:
    element:
      id: "reset-database-button"
    direction: DOWN
    speed: 80

# Reset the database
- tapOn:
    id: "reset-database-button"

# Confirm reset
- tapOn: "Reset"

# Dismiss success alert
- tapOn: "OK"

# Go back to dashboard
- tapOn: "Done"

# Verify clean state
- assertVisible: "Pain Tracker"

# ======================
# Phase 1: Create Episode
# ======================

# Verify we're on dashboard with no active episode
- assertVisible:
    id: "dashboard-title"

- assertVisible:
    id: "start-episode-button"

# Start a new episode
- tapOn:
    id: "start-episode-button"

# Should be on Start Episode screen
- assertVisible: "Start Episode"

# Wait for screen to load
- waitForAnimationToEnd

# Save episode with default intensity (3)
- scrollUntilVisible:
    element:
      id: "save-episode-button"
    direction: DOWN
    speed: 80

- tapOn:
    id: "save-episode-button"

# Wait for save and navigation back
- waitForAnimationToEnd

# Verify we're back on dashboard
- assertVisible:
    id: "dashboard-title"

# Verify Start Episode button is now hidden (episode is active)
- assertNotVisible:
    id: "start-episode-button"

# Verify active episode card is showing
- assertVisible:
    id: "active-episode-card"

# ======================
# Phase 2: Edit Episode Details
# ======================

# Open episode details by tapping the active card
- tapOn:
    id: "active-episode-card"

# Should be on Episode Details screen
- assertVisible: "Episode Details"

# Wait for data to load
- waitForAnimationToEnd

# Tap Edit button
- tapOn: "Edit"

# Should now be on Edit Episode screen
- assertVisible: "Edit Episode"

# Wait for episode data to load
- waitForAnimationToEnd

# Scroll to find pain locations
- scrollUntilVisible:
    element:
      text: "Left Side"
    direction: DOWN
    speed: 80

# Select a pain location (Left Temple)
- tapOn: "Temple"

# Scroll to symptoms section - look for symptom chip instead of heading
- scrollUntilVisible:
    element:
      text: "Nausea"
    direction: DOWN
    speed: 80

# Select a symptom (Nausea)
- tapOn: "Nausea"

# Scroll to triggers section - look for trigger chip instead of heading
- scrollUntilVisible:
    element:
      text: "Stress"
    direction: DOWN
    speed: 80

# Select a trigger (Stress)
- tapOn: "Stress"

# Scroll to notes section - find by placeholder text
- scrollUntilVisible:
    element:
      text: "Any additional details..."
    direction: DOWN
    speed: 80

# Add a note - tap on the input field by placeholder
- tapOn:
    text: "Any additional details..."
- inputText: "Sharp pain started during work meeting. Feeling nauseous."

# Dismiss the keyboard
- hideKeyboard

# Save the edits
- scrollUntilVisible:
    element:
      id: "save-episode-button"
    direction: DOWN
    speed: 80

- tapOn:
    id: "save-episode-button"

# Wait for save and navigation back
- waitForAnimationToEnd

# Give extra time for save operation to complete
- extendedWaitUntil:
    visible: "Episode Details"
    timeout: 5000

# Verify the note was saved (check for part of the text)
- scrollUntilVisible:
    element:
      text: "Sharp pain started"
    direction: DOWN
    speed: 80

# ======================
# Phase 3: Log Update (Intensity + Note)
# ======================

# Scroll back to top to find action buttons
- scroll

# Look for Log Update button (available for ongoing episodes)
- scrollUntilVisible:
    element:
      id: "log-update-button"
    direction: DOWN
    speed: 80

- tapOn:
    id: "log-update-button"

# Should be on Log Update screen
- assertVisible: "Log Update"

# Wait for screen to load
- waitForAnimationToEnd

# Scroll to notes input
- scrollUntilVisible:
    element:
      id: "update-notes-input"
    direction: DOWN
    speed: 80

# Add a note about current status
- tapOn:
    id: "update-notes-input"
- inputText: "Took a break and closed blinds. Pain still present but manageable."

# Dismiss the keyboard
- hideKeyboard

# Save the update
- scrollUntilVisible:
    element:
      id: "save-update-button"
    direction: DOWN
    speed: 80

- tapOn:
    id: "save-update-button"

# Wait for save and navigation back
- waitForAnimationToEnd

# Should be back on Episode Details
- assertVisible: "Episode Details"

# Verify the new note appears in timeline
- scrollUntilVisible:
    element:
      text: "closed blinds"
    direction: DOWN
    speed: 80

# ======================
# Phase 4: View Timeline
# ======================

# Scroll to Timeline section
- scrollUntilVisible:
    element:
      text: "Timeline"
    direction: DOWN
    speed: 80

# Timeline should be visible
- assertVisible: "Timeline"

# Timeline should show multiple events
# - Initial intensity reading (created with episode)
# - Update note we just added

# ======================
# Phase 5: End Episode
# ======================

# Scroll to bottom to find End Episode button
- scrollUntilVisible:
    element:
      id: "end-episode-button"
    direction: DOWN
    speed: 80

# Tap End Episode
- tapOn:
    id: "end-episode-button"

# Alert should appear asking for confirmation
# Tap "End Episode" button in the alert
- tapOn: "End Episode"

# Wait for episode to end and screen to update
- waitForAnimationToEnd

# Should still be on Episode Details, but episode is now ended
- assertVisible: "Episode Details"

# The "Ongoing" badge should no longer be visible
- assertNotVisible: "Ongoing"

# Action buttons (Log Update, Log Medication) should no longer be visible
- assertNotVisible:
    id: "log-update-button"

# End Episode button should also be gone
- assertNotVisible:
    id: "end-episode-button"

# ======================
# Phase 6: Verify in History
# ======================

# Go back to dashboard
- tapOn: "Back"

# Wait for navigation
- waitForAnimationToEnd

# Should be on dashboard
- assertVisible:
    id: "dashboard-title"

# Active episode card should no longer be visible
- assertNotVisible:
    id: "active-episode-card"

# Start Episode button should be back (no active episode)
- assertVisible:
    id: "start-episode-button"

# Navigate to Episodes tab to view history
- tapOn:
    id: "episodes-tab"

# Wait for Episodes screen to load
- waitForAnimationToEnd

# Should be on Episodes screen
- assertVisible: "Episodes"

# The ended episode should appear in the list
- assertVisible:
    id: "episode-card-0"

# Tap on the episode to view details
- tapOn:
    id: "episode-card-0"

# Should be on Episode Details for the completed episode
- assertVisible: "Episode Details"

# Verify our notes are present
- scrollUntilVisible:
    element:
      text: "Sharp pain started"
    direction: DOWN
    speed: 80

# Verify timeline shows all our updates
- scrollUntilVisible:
    element:
      text: "Timeline"
    direction: DOWN
    speed: 80

- assertVisible: "Timeline"

# ======================
# Test Complete!
# ======================
#
# We successfully tested:
# ✓ Creating a new episode
# ✓ Editing episode details (locations, symptoms, triggers, notes)
# ✓ Logging updates (notes)
# ✓ Viewing timeline
# ✓ Ending the episode
# ✓ Verifying episode appears in history with all data
